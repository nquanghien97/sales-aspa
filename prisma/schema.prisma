generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum FILE_CATEGORY {
  SALES_POLICY
  PRODUCTS
  PRODUCT_DOCUMENTS
  FEEDBACKS
}

enum FILE_TYPE {
  image
  video
  pdf
}

model files {
  id               Int              @id @default(autoincrement())
  url              String           @db.LongText
  type             FILE_TYPE
  fileName         String?
  fileCategorySlug String?
  category         FILE_CATEGORY
  fileCategory     file_categories? @relation(fields: [fileCategorySlug], references: [slug], onDelete: Cascade)
  authorId         Int
  author           user             @relation(fields: [authorId], references: [id])
  createdAt        DateTime         @default(now())
}

model user {
  id        Int       @id @default(autoincrement())
  username  String    @unique(map: "User_username_key")
  fullName  String
  password  String
  role      user_role @default(USER)
  createdAt DateTime  @default(now())

  category category[]

  image files[]

  proposal proposal[]
}

enum user_role {
  USER
  ADMIN
}

model insight_mother {
  id        Int      @id @default(autoincrement())
  keyword   String
  explain   String   @db.LongText
  solution  String   @db.LongText
  createdAt DateTime @default(now())
}

enum CATEGORY {
  INSIGHT_MOTHER
  HANDLE_REJECTION
}

model category {
  id        Int      @id @default(autoincrement())
  keyword   String
  content   String   @db.LongText
  authorId  Int
  author    user     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  category  CATEGORY

  proposal proposal[]
}

model file_categories {
  id        Int           @id @default(autoincrement())
  title     String
  slug      String        @unique
  category  FILE_CATEGORY
  order     Int           @default(0)
  createdAt DateTime      @default(now())

  files files[]
}

enum PROPOSAL_STATUS {
  PENDING
  APPROVED
}

model proposal {
  id           Int             @id @default(autoincrement())
  keyword      String
  authorId     Int
  author       user            @relation(fields: [authorId], references: [id])
  status       PROPOSAL_STATUS @default(PENDING)
  categoryType CATEGORY
  categoryId   Int?
  category     category?       @relation(fields: [categoryId], references : [id])
  createdAt    DateTime        @default(now())
}

model customers {
  id          Int      @id @default(autoincrement())
  province    String
  district    String?
  ward        String?
  address     String?
  fullName    String
  job         String?
  createdAt   DateTime @default(now())
}
